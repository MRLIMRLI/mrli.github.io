<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[对数据库老旧数据进行备份]]></title>
      <url>http://mrli.me/2016/06/23/%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E8%80%81%E6%97%A7%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%A4%87%E4%BB%BD/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li><p>在系统不断运行过程中，用户的订单数据，行为数据，登陆数据等会随着时间的推移越来越多，在我们使用关系型数据库，用户量还不错的前提下，表中的记录数将会是一个不小的数字。当对部分数据进行查询，或者做一些分析的时候，速度将会是我们的一个瓶颈，特别是在执行一些复杂查询的情况下，效率难以想象。</p>
</li>
<li><p>这个时候形成了<strong><em>需求</em></strong>：<code>加快查询速度</code></p>
</li>
<li><p>既然影响速度的主要原因是表太大，数据太多，那么很容易想到，将表切成一个一个数据量可以接受的从表就可以解决问题。</p>
</li>
<li>文章开头说了，数据主要是<code>订单数据</code>，<code>行为数据</code>，<code>登陆数据</code>，考虑到这部分数据主要都是<strong><em>新增</em></strong>，基本不会出现修改的情况，可以给出的解决方案是：对三个月以上的数据进行分离，存入备份表，每年产生一张备份表。（当然这里对多久的数据进行分离，多久产生一张备份表需要根据每天产生的数据量去进行计算）</li>
</ul>
<a id="more"></a>
<ul>
<li><strong>这里只给出实现思路，代码均为伪代码</strong></li>
</ul>
<h3 id="判断将要创建的备份表是否存在"><a href="#判断将要创建的备份表是否存在" class="headerlink" title="判断将要创建的备份表是否存在"></a>判断将要创建的备份表是否存在</h3><blockquote>
<p>入参为系统封装的JDBC客户端和表名</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">tableExist</span><span class="params">(DBClient dbClient, String tableName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DatabaseMetaData meta = dbClient.getConnection().getMetaData();<span class="comment">//sqlConn数据库连接</span></span><br><span class="line">        ResultSet set = meta.getTables(<span class="keyword">null</span>, <span class="keyword">null</span>, tableName, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">while</span> (set.next()) &#123;</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger().error(<span class="string">"备份存量数据出现异常"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="主要逻辑实现"><a href="#主要逻辑实现" class="headerlink" title="主要逻辑实现"></a>主要逻辑实现</h3><blockquote>
<p>主要围绕sql语句<a href="http://www.runoob.com/sql/sql-insert-into-select.html" target="_blank" rel="external">INSERT INTO SELECT</a>来展开，逻辑请看代码中的注释</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="comment">//定义备份表的前缀</span></span><br><span class="line">	String table_prefix = <span class="string">"login_log_backup_"</span>;</span><br><span class="line">	<span class="comment">//从系统封装的jdbc工厂类中获取dbClient</span></span><br><span class="line">    DBClient dbClient = DBClientFactory.getDefaultDBClient();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    	<span class="comment">//这里以登陆日志表（login_log）为例</span></span><br><span class="line">    	<span class="comment">//找到登陆时间在三个月以上的数据</span></span><br><span class="line">        String sql = <span class="string">"SELECT user_id,count(*) c,SUM(IF(FROM_UNIXTIME(UNIX_TIMESTAMP(login_time) + 90 * 24 * 3600) &lt; NOW(),1,0)) c1 "</span> +</span><br><span class="line">                <span class="string">"FROM login_log GROUP BY user_id HAVING c1&gt;=c ORDER BY c DESC;"</span>;</span><br><span class="line">        dbClient.beginTransaction();</span><br><span class="line">        <span class="comment">//返回主键userId的list（queryMap方法对结果进行了转换）</span></span><br><span class="line">        List &lt;Integer&gt; userIds = dbClient.queryMap(sql);</span><br><span class="line">        <span class="comment">//判断结果是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (CommonUtils.isNotEmpty(loginIds)) &#123;</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy"</span>);</span><br><span class="line">            String year = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">            <span class="comment">//拼接完整表名</span></span><br><span class="line">            String tableName = table_prefix + year;</span><br><span class="line">            <span class="keyword">if</span> (!tableExist(dbClient, tableName)) &#123;</span><br><span class="line">            	<span class="comment">//当备份表不存在时创建</span></span><br><span class="line">                String createSql = <span class="string">"CREATE TABLE "</span> + tableName + <span class="string">" LIKE login_log"</span>;</span><br><span class="line">                dbClient.update(createSql);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历</span></span><br><span class="line">            <span class="keyword">for</span> (Map map : userIds) &#123;</span><br><span class="line">                <span class="keyword">int</span> userId = (<span class="keyword">int</span>) map.get(<span class="string">"user_id"</span>);</span><br><span class="line">                String insertSql = <span class="string">"INSERT INTO "</span> + tableName + <span class="string">" SELECT * FROM login_log WHERE user_id ="</span> + userId;</span><br><span class="line">                String deleteSql = <span class="string">"DELETE FROM login_log WHERE user_id="</span> + userId;</span><br><span class="line">                <span class="comment">//插入备份表</span></span><br><span class="line">                dbClient.insert(insertSql);</span><br><span class="line">                <span class="comment">//删除源表数据</span></span><br><span class="line">                dbClient.delete(deleteSql);</span><br><span class="line">            &#125;</span><br><span class="line">            dbClient.commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"BackupTask occurred an error."</span>, e);</span><br><span class="line">        <span class="comment">//出现异常时进行回滚</span></span><br><span class="line">        dbClient.rollback();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">   		<span class="comment">//释放数据库连接</span></span><br><span class="line">        DBClientFactory.releaseClient();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"BackupTask Has Done."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最后只需要再定义一个定时任务来跑execute方法即可，定时任务策略根据实际情况进行分配。"><a href="#最后只需要再定义一个定时任务来跑execute方法即可，定时任务策略根据实际情况进行分配。" class="headerlink" title="最后只需要再定义一个定时任务来跑execute方法即可，定时任务策略根据实际情况进行分配。"></a>最后只需要再定义一个定时任务来跑execute方法即可，定时任务策略根据实际情况进行分配。</h3><blockquote>
<p>定时任务可以使用Quartz来实现或者是Java自带的TimerTask来实现</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中getBytes()详解]]></title>
      <url>http://mrli.me/2015/08/09/Java%E4%B8%ADString%E7%9A%84getBytes()%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>在Java中，String的getBytes()方法是得到一个操作系统默认的编码格式的字节数组。这个表示在不通OS下，返回的东西不一样！<br>String.getBytes(String decode)方法会根据指定的decode编码返回某字符串在该编码下的byte数组表示，如 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[] b_gbk = <span class="string">"中"</span>.getBytes(<span class="string">"GBK"</span>); </span><br><span class="line"><span class="keyword">byte</span>[] b_utf8 = <span class="string">"中"</span>.getBytes(<span class="string">"UTF-8"</span>); </span><br><span class="line"><span class="keyword">byte</span>[] b_iso88591 = <span class="string">"中"</span>.getBytes(<span class="string">"ISO8859-1"</span>);</span><br></pre></td></tr></table></figure>
<p>将分别返回“中”这个汉字在GBK、UTF-8和ISO8859-1编码下的byte数组表示，此时b_gbk的长度为2，b_utf8的长度为3，b_iso88591的长度为1。 </p>
<a id="more"></a>
<p>而与getBytes相对的，可以通过new String(byte[], decode)的方式来还原这个“中”字时，这个new String(byte[], decode)实际是使用decode指定的编码来将byte[]解析成字符串。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s_gbk = <span class="keyword">new</span> String(b_gbk,<span class="string">"GBK"</span>); </span><br><span class="line">String s_utf8 = <span class="keyword">new</span> String(b_utf8,<span class="string">"UTF-8"</span>); </span><br><span class="line">String s_iso88591 = <span class="keyword">new</span> String(b_iso88591,<span class="string">"ISO8859-1"</span>);</span><br></pre></td></tr></table></figure>
<p>通过打印s_gbk、s_utf8和s_iso88591，会发现，s_gbk和s_utf8都是“中”，而只有s_iso88591是一个不认识的字符，为什么使用ISO8859-1编码再组合之后，无法还原“中”字呢，其实原因很简单，因为ISO8859-1编码的编码表中，根本就没有包含汉字字符，当然也就无法通过”中”.getBytes(“ISO8859-1”);来得到正确的“中”字在ISO8859-1中的编码值了，所以再通过new String()来还原就无从谈起了。 </p>
<p>因此，通过String.getBytes(String decode)方法来得到byte[]时，一定要确定decode的编码表中确实存在String表示的码值，这样得到的byte[]数组才能正确被还原。 </p>
<p>有时候，为了让中文字符适应某些特殊要求（如http header头要求其内容必须为iso8859-1编码），可能会通过将中文字符按照字节方式来编码的情况，如 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s_iso88591 = <span class="keyword">new</span> String(<span class="string">"中"</span>.getBytes(<span class="string">"UTF-8"</span>),<span class="string">"ISO8859-1"</span>)</span><br></pre></td></tr></table></figure>
<p>这样得到的s_iso8859-1字符串实际是三个在 ISO8859-1中的字符，在将这些字符传递到目的地后，目的地程序再通过相反的方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s_utf8 = <span class="keyword">new</span> String(s_iso88591.getBytes(<span class="string">"ISO8859-1"</span>),<span class="string">"UTF-8"</span>)</span><br></pre></td></tr></table></figure></p>
<p>来得到正确的中文汉字“中”。这样就既保证了遵守协议规定、也支持中文。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac OS上安装配置MongoDB]]></title>
      <url>http://mrli.me/2015/08/08/Mac%20OS%E4%B8%8A%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEMongoDB/</url>
      <content type="html"><![CDATA[<p>之前没事的时候玩了玩MongoDB，最近换了系统，于是在Mac下又配置了一遍 <br><br>在Mac OS上安装mongoDB实际上很简单，官网上有详细的步骤照着做就好了。下面说一说我的步骤以及配置方式。 <br></p>
<p>我的Mac OS的版本是10.9.5，使用的工具有终端、emacs <br></p>
<p>1、去MongoDB官网<a href="http://www.mongodb.org/downloads" target="_blank" rel="external">下载</a>mongoDB包 <br></p>
<p>2、下载之后解压缩到任意一个目录下解压缩后可以发现有一个“bin”目录，这个目录放置mongoDB的命令的目录</p>
<a id="more"></a>
<p>3、使用命令“mkdir -p /data/db”，在“/”下创建data/db目录，这个是放置mongoDB数据的目录，我试了不创建这个目录就启动mongoDB，结果报“exception in initAndListen: 10296 dbpath (/data/db/) does not exist, terminating”，这个目录不仅是必须的而且不会自动创建，不知道能不能换个目录放置数据 <br></p>
<p>4、进入”bin”目录，使用命令“./mongod”启动mongoDB server，启动后注意不要关闭终端 <br></p>
<p>5、另外打开一个终端窗口，同样为了方便起见，进入”bin”目录，运行命令”./mongo”，这时可以看到mongoDB的控制台在终端上出现了，这时就可以使用任意mongoDB的命令操作mongoDB数据了，就和使用mysql命令行操作mysql一样  <br></p>
<p>6、为了方便起见，把mongoDB的bin目录加入到环境变量中，具体的方法是编辑”~”下的.bash_profile文件（如果没有找到，则自己创建一个）<br><br>PATH=”/../mongodb/bin: …” <br><br>export PATH </p>
]]></content>
    </entry>
    
  
  
</search>
